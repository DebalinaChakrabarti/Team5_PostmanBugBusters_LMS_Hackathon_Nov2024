{
	"info": {
		"_postman_id": "8b5ec035-83d9-42d8-99f9-17530fac7ca4",
		"name": "Team5_Postman_Bug_Busters_LMS_Hackathon_Nov2024",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6de74170-eb9e-4c6a-8cfe-94d26e476ff6",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"AuthToken\",jsonData.token);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4c04e16f-f270-4955-8c63-be8fc71eea3a",
								"exec": [
									"//--------- Set the Content Type Header-----------",
									"pm.request.headers.add({",
									"    key: \"Content-Type\",",
									"    value: pm.variables.get(\"contentType\")",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "a6a2f7f4-b6ed-4ca3-955a-a72f5fd719f2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userLoginEmailId\": \"{{user_LoginEmail}}\",\n  \"password\": \"{{user_password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}{{Endpoint}}"
					},
					"response": []
				}
			],
			"id": "fc1ab151-c597-40a3-b70e-c8575e8b2e73"
		},
		{
			"name": "Program Module",
			"item": [
				{
					"name": "GET All Programs with Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "64a1d76d-2a59-4ef3-957a-13441d3547ce",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "832daf17-9dfa-4c53-9eea-a15141204a6a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}{{Endpoint}}"
					},
					"response": []
				},
				{
					"name": "Add New Program with Mandatory fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1a5fd139-b9ac-4ee4-94f5-ea0b4eb51eb7",
								"exec": [
									"var jsonData = pm.response.json();",
									"console.log(jsonData);",
									"",
									"const expectedSchema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"programId\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"programName\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"programDescription\": {",
									"      \"type\": \"null\"",
									"    },",
									"    \"programStatus\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"creationTime\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"lastModTime\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"programId\",",
									"    \"programName\",",
									"    \"programDescription\",",
									"    \"programStatus\",",
									"    \"creationTime\",",
									"    \"lastModTime\"",
									"  ]",
									"}",
									"//calling common methods",
									"//eval(pm.environment.get(\"commonTests\"))();",
									"",
									"",
									"// Get the status code of the response",
									"var StatusCode = pm.response.code;",
									"",
									"if(StatusCode === 201){",
									"",
									"    //calling jsonSchemaValidation methods",
									"    eval(pm.environment.get(\"jsonSchemaValidation\"))();",
									"",
									"    pm.test(\"Validating Test Data Type Of the Response\", () => {",
									"    pm.expect(jsonData).to.be.an(\"object\");",
									"    pm.expect(jsonData.programId).to.be.a(\"number\");",
									"    pm.expect(jsonData.programName).to.be.a(\"string\");",
									"    pm.expect(jsonData.programStatus).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Validating ProgramName\", () => {",
									"        pm.expect(jsonData.programName).to.equal(pm.collectionVariables.get(\"programName2\"));",
									"    });",
									"    pm.test(\"Validating Program Status\", () => {",
									"        pm.expect(jsonData.programStatus).to.equal(pm.variables.get(\"programStatus\"));",
									"    });",
									"",
									"pm.collectionVariables.set(\"programId2\",jsonData.programId);",
									"pm.collectionVariables.set(\"programName2\",jsonData.programName);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c5b6d587-8c23-4093-9512-a71b90f5cccc",
								"exec": [
									"//--------- Set the Content Type Header-----------",
									"pm.request.headers.add({",
									"    key: \"Content-Type\",",
									"    value: pm.variables.get(\"contentType\")",
									"});",
									"",
									"var statusCode = pm.variables.get(\"statusCode\");",
									"console.log(\"statusCode \"+statusCode);",
									"if(statusCode === 201){",
									"var programName2 = \"PostmanBugBusters\"+ \"-\" + pm.variables.replaceIn('{{$randomFirstName}}');",
									"pm.collectionVariables.set(\"programName2\", programName2);",
									"}else{",
									" pm.collectionVariables.set(\"programName2\", pm.variables.get(\"programName\"));",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "98120312-f7c5-4ae0-bb0b-4925ec865c08",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programName\": \"{{programName2}}\",\n  \"programStatus\": \"{{programStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}{{Endpoint}}"
					},
					"response": []
				},
				{
					"name": "Add New Program with all fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1a5fd139-b9ac-4ee4-94f5-ea0b4eb51eb7",
								"exec": [
									"if (pm.response.text() === '') {",
									"    console.log(\"Empty response received.\");",
									"}else{",
									"var jsonData = pm.response.json();",
									"console.log(jsonData);",
									"",
									"const expectedSchema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"programId\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"programName\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"programDescription\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"programStatus\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"creationTime\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"lastModTime\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"programId\",",
									"    \"programName\",",
									"    \"programDescription\",",
									"    \"programStatus\",",
									"    \"creationTime\",",
									"    \"lastModTime\"",
									"  ]",
									"}",
									"",
									"",
									"// Get the status code of the response",
									"var StatusCode = pm.response.code;",
									"if(StatusCode === 201){",
									"",
									"    //calling jsonSchemaValidation methods",
									"    eval(pm.environment.get(\"jsonSchemaValidation\"))();",
									"",
									"    pm.test(\"Validating Test Data Type Of the Response\", () => {",
									"    pm.expect(jsonData).to.be.an(\"object\");",
									"    pm.expect(jsonData.programId).to.be.a(\"number\");",
									"    pm.expect(jsonData.programName).to.be.a(\"string\");",
									"    pm.expect(jsonData.programDescription).to.be.a(\"string\");",
									"    pm.expect(jsonData.programStatus).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Validating ProgramName\", () => {",
									"        pm.expect(jsonData.programName).to.equal(pm.collectionVariables.get(\"programName1\"));",
									"    });",
									"    pm.test(\"Validating Program Status\", () => {",
									"        pm.expect(jsonData.programStatus).to.equal(pm.variables.get(\"programStatus\"));",
									"    });",
									"",
									"pm.collectionVariables.set(\"programId1\",jsonData.programId);",
									"pm.collectionVariables.set(\"programName1\",jsonData.programName);",
									"}",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9883b5a5-117a-4761-9cff-4a6092dc4fd8",
								"exec": [
									"//--------- Set the Content Type Header-----------",
									"pm.request.headers.add({",
									"    key: \"Content-Type\",",
									"    value: pm.variables.get(\"contentType\")",
									"});",
									"",
									"var statusCode = pm.variables.get(\"statusCode\");",
									"console.log(\"statusCode \"+statusCode);",
									"if(statusCode === 201){",
									"var programName1 = \"PostmanBugBusters\"+ \"-\" + pm.variables.replaceIn('{{$randomFirstName}}');",
									"pm.collectionVariables.set(\"programName1\", programName1);",
									"}else{",
									" pm.collectionVariables.set(\"programName1\", pm.variables.get(\"programName\"));   ",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "21e213e8-a76d-42ad-9aff-5f6799537c45",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programName\": \"{{programName1}}\",\n  \"programDescription\": \"{{programDescription}}\",\n  \"programStatus\": \"{{programStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}{{Endpoint}}"
					},
					"response": []
				},
				{
					"name": "get all programs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e972e993-45a7-4af6-97cf-6f6a4d18bc3f",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "0f5ca63a-40a0-4b69-85fa-ce8abf729f90",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}{{Endpoint}}"
					},
					"response": []
				},
				{
					"name": "GET Program by ProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "039e0266-6c3c-4517-a505-945c27ea36dd",
								"exec": [
									"const jsonData = pm.response.json();",
									"console.log(jsonData);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e2d1dddb-c828-44b6-81e3-3aa8c8d51154",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}{{Endpoint}}"
					},
					"response": []
				},
				{
					"name": "Update Program by ProgramName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00f9d2db-3699-4aa1-9667-02d42c35872c",
								"exec": [
									"if (pm.response.text() === '') {",
									"    console.log(\"Empty response received.\");",
									"}else{",
									"var jsonData = pm.response.json();",
									"console.log(jsonData);",
									"",
									"",
									"// Get the status code of the response",
									"var StatusCode = pm.response.code;",
									"",
									" if(StatusCode === 200){",
									"",
									"const expectedSchema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"programId\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"programName\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"programDescription\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"programStatus\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"creationTime\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"lastModTime\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"programId\",",
									"    \"programName\",",
									"    \"programDescription\",",
									"    \"programStatus\",",
									"    \"creationTime\",",
									"    \"lastModTime\"",
									"  ]",
									"}",
									"   eval(pm.environment.get(\"jsonSchemaValidation\"))();",
									"",
									"    pm.test(\"Validating Test Data Type Of the Response\", () => {",
									"    pm.expect(jsonData).to.be.an(\"object\");",
									"    pm.expect(jsonData.programId).to.be.a(\"number\");",
									"    pm.expect(jsonData.programName).to.be.a(\"string\");",
									"    pm.expect(jsonData.programDescription).to.be.a(\"string\");",
									"    pm.expect(jsonData.programStatus).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Validating Program ID\", () => {",
									"        pm.expect(jsonData.programId).to.equal(pm.collectionVariables.get(\"programId1\"));",
									"    });",
									"    pm.test(\"Validating ProgramName\", () => {",
									"        pm.expect(jsonData.programName).to.equal(pm.collectionVariables.get(\"programName1\"));",
									"    });",
									"    pm.test(\"Validating Program Status\", () => {",
									"        pm.expect(jsonData.programStatus).to.equal(pm.variables.get(\"programStatus\"));",
									"    });",
									"",
									"// //pm.collectionVariables.set(\"programId\",jsonData.programId);",
									"// pm.collectionVariables.set(\"programName1\",jsonData.programName);",
									" }",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "997e55f1-e809-4442-a165-d39b65c1cdce",
								"exec": [
									"//--------- Set the Content Type Header-----------",
									"pm.request.headers.add({",
									"    key: \"Content-Type\",",
									"    value: pm.variables.get(\"contentType\")",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "aeec94f5-b9e5-4cb9-be55-51b90fc3c5d3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programName\": \"{{programName1}}\",\n  \"programDescription\": \"{{programDescription}}\",\n  \"programStatus\": \"{{programStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}{{Endpoint}}"
					},
					"response": []
				},
				{
					"name": "Update Program by ProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9430f6eb-9183-4933-8c31-2d7ff04b459a",
								"exec": [
									"if (pm.response.text() === '') {",
									"    console.log(\"Empty response received.\");",
									"}else{",
									"var jsonData = pm.response.json();",
									"console.log(jsonData);",
									"}",
									"",
									"//Get the status code of the response",
									"var StatusCode = pm.response.code;",
									"",
									"if(StatusCode === 200){",
									"const expectedSchema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"programId\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"programName\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"programDescription\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"programStatus\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"creationTime\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"lastModTime\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"programId\",",
									"    \"programName\",",
									"    \"programDescription\",",
									"    \"programStatus\",",
									"    \"creationTime\",",
									"    \"lastModTime\"",
									"  ]",
									"}",
									"   eval(pm.environment.get(\"jsonSchemaValidation\"))();",
									"",
									"    pm.test(\"Validating Test Data Type Of the Response\", () => {",
									"    pm.expect(jsonData).to.be.an(\"object\");",
									"    pm.expect(jsonData.programId).to.be.a(\"number\");",
									"    pm.expect(jsonData.programName).to.be.a(\"string\");",
									"    pm.expect(jsonData.programDescription).to.be.a(\"string\");",
									"    pm.expect(jsonData.programStatus).to.be.a(\"string\");",
									"    });",
									"",
									"    pm.test(\"Validating Program ID\", () => {",
									"        pm.expect(jsonData.programId).to.equal(pm.collectionVariables.get(\"programId1\"));",
									"    });",
									"    pm.test(\"Validating ProgramName\", () => {",
									"        pm.expect(jsonData.programName).to.equal(pm.collectionVariables.get(\"programName1\"));",
									"    });",
									"    pm.test(\"Validating Program Status\", () => {",
									"        pm.expect(jsonData.programStatus).to.equal(pm.variables.get(\"programStatus\"));",
									"    });",
									"",
									"// //pm.collectionVariables.set(\"programId\",jsonData.programId);",
									"// pm.collectionVariables.set(\"programName\",jsonData.programName);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a234965f-a8c8-4c8c-b417-1398597f7048",
								"exec": [
									"//--------- Set the Content Type Header-----------",
									"pm.request.headers.add({",
									"    key: \"Content-Type\",",
									"    value: pm.variables.get(\"contentType\")",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "a8775e4c-6aae-4b48-99da-bf1d0d5d7b29",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programName\": \"{{programName1}}\",\n  \"programDescription\": \"{{programDescription}}\",\n  \"programStatus\": \"{{programStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}{{Endpoint}}"
					},
					"response": []
				}
			],
			"id": "68f2a055-3fcc-45f5-b32e-99f6df7eed03"
		},
		{
			"name": "Class Module",
			"item": [
				{
					"name": "Get All Class List",
					"id": "2db95ec4-17ee-4c4f-b417-fea318601d50",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}{{getAllClassListEndpoint}}"
					},
					"response": []
				},
				{
					"name": "Get Class Recordings By Batch Id",
					"id": "5205d5e1-265b-42cc-9953-a8c4be142f9d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}{{getBatchRecordingPathParam}}{{batchIdWithRecording}}"
					},
					"response": []
				},
				{
					"name": "Get All Classes By Batch Id",
					"id": "e569c1cb-749e-4269-a2a9-76546af36deb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}{{getClassesByBatchIdPathParam}}{{batchIDWithActiveStatus}}"
					},
					"response": []
				},
				{
					"name": "Get All Classes By Staff Id",
					"id": "329ff651-9d85-4d13-9e5d-d2163ea2a2de",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}{{getClassesByStaffID}}{{validStaffID}}"
					},
					"response": []
				},
				{
					"name": "Delete Class By Class Id",
					"id": "118cdde0-2d61-4a84-9132-4f80e8a4c26d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}{{deleteByClassPathParam}}{{classID}}"
					},
					"response": []
				},
				{
					"name": "Create New Class",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2553e694-aa73-40bd-82c7-42ded575d949",
								"exec": [
									"//--------- Set the Content Type Header-----------\r",
									"pm.request.headers.add({\r",
									"    key: \"Content-Type\",\r",
									"    value: pm.variables.get(\"contentType\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "65026381-287d-4893-902a-39ab3a7ab8d1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchId\": {{batchId}},\r\n  \"classComments\": \"{{classComments}}\",\r\n  \"classDate\": \"{{classDate}}\",\r\n  \"classDescription\": \"{{classDescription}}\",\r\n  \"classNo\": {{classNo}},\r\n  \"classNotes\": \"{{classNotes}}\",\r\n  \"classRecordingPath\": \"{{classRecordingPath}}\",\r\n  \"classStaffId\": \"{{classStaffId}}\",\r\n  \"classTopic\": \"{{classTopic}}\",\r\n\"classScheduledDates\": \"{{classSCheduledDates}}\"\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}{{EndPoint}}"
					},
					"response": []
				}
			],
			"id": "68dc62cd-6625-4b10-b8f5-c53609071ad3"
		},
		{
			"name": "User Role Module",
			"item": [
				{
					"name": "Get Assigned Program/Batch(es) of All Users",
					"id": "c042e4c8-fa7a-4dad-9972-cd4badf8d9b6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}{{Endpoint}}"
					},
					"response": []
				},
				{
					"name": "Get Assigned Program/Batch of a User By User Id",
					"id": "00e79f58-66ee-40b5-9a65-a727af903db7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}{{Endpoint}}"
					},
					"response": []
				},
				{
					"name": "Delete All Programs Batches assigned to the User By UserId",
					"id": "d4f61b86-088a-4b5a-846e-9a904c200e88",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}{{Endpoint}}"
					},
					"response": []
				}
			],
			"id": "63b2a3ed-675b-459b-9783-373f3b6e27d5"
		},
		{
			"name": "Delete and Data Cleanup",
			"item": [
				{
					"name": "Delete Program By ProgramID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8b853394-9555-4c81-8580-8bb14bc44c53",
								"exec": [
									"// pm.environment.unset(\"programId\");",
									"// pm.environment.unset(\"programName\");",
									"// Get the status code of the response",
									"//var StatusCode = pm.response.code;",
									"",
									"//calling common methods",
									"// if (pm.response.text() === '') {",
									"//     console.log(\"Empty response received.\");",
									"//     pm.test(\"Validating Status Code\", ()=> {",
									"//     pm.expect(pm.response.code).to.eql(pm.variables.get(\"statusCode\"));",
									"// });",
									"// }else{",
									"// if(StatusCode === 200 && pm.response.text() !== ''){",
									"//     pm.test(\"Validating Status Code\", ()=> {",
									"//     pm.expect(pm.response.code).to.eql(pm.variables.get(\"statusCode\"));",
									"// });",
									"// }else{",
									"// var jsonData = pm.response.json();",
									"// console.log(jsonData);",
									"// eval(pm.environment.get(\"commonTests\"))();",
									"// }",
									"// }",
									"// pm.collectionVariables.set(\"programId1\",null);",
									"// pm.collectionVariables.set(\"programName1\",null);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "5f8b8c64-dd75-4882-8148-a34427f432b0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}{{Endpoint}}"
					},
					"response": []
				},
				{
					"name": "Delete Program By ProgramName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8b853394-9555-4c81-8580-8bb14bc44c53",
								"exec": [
									"// pm.environment.unset(\"programId2\");",
									"// pm.environment.unset(\"programName2\");",
									"",
									"// const jsonData = pm.response.json();",
									"// console.log(jsonData);",
									"",
									"// Get the status code of the response",
									"// var StatusCode = pm.response.code;",
									"",
									"",
									"// //calling common methods",
									"// if (pm.response.text() === '') {",
									"//     console.log(\"Empty response received.\");",
									"//     pm.test(\"Validating Status Code\", ()=> {",
									"//     pm.expect(pm.response.code).to.eql(pm.variables.get(\"statusCode\"));",
									"// });",
									"// }else{",
									"// if(StatusCode === 200){",
									"//     pm.test(\"Validating Status Code\", ()=> {",
									"//     pm.expect(pm.response.code).to.eql(pm.variables.get(\"statusCode\"));",
									"// });",
									"// }else{",
									"// var jsonData = pm.response.json();",
									"// console.log(jsonData);",
									"// eval(pm.environment.get(\"commonTests\"))();",
									"// }",
									"// }",
									"// pm.collectionVariables.set(\"programId2\",null);",
									"// pm.collectionVariables.set(\"programName2\",null);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "dbd7099e-eb29-4bfe-b908-eca017c41de6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}{{Endpoint}}"
					},
					"response": []
				}
			],
			"id": "60d19aa4-0e84-49fe-82e7-6e3424d17b8b"
		},
		{
			"name": "Logout",
			"item": [
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8b853394-9555-4c81-8580-8bb14bc44c53",
								"exec": [
									"//     pm.test(\"Validating Status Code\", ()=> {",
									"//     pm.expect(pm.response.code).to.eql(pm.variables.get(\"statusCode\"));",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "23a1c8e6-5d3a-4bff-9c99-c8ab5f976ff7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}{{Endpoint}}"
					},
					"response": []
				}
			],
			"id": "72f1d12d-ed44-4070-8772-f10d098c3a6c"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "6db1a0c5-3bd2-4695-b19a-0c92e3c8f0a3",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"\r",
					"//--------------Fetch Data from External JSON Data file-----------------\r",
					"if (typeof pm.variables.get('requestdata') !== 'object') {\r",
					"    pm.variables.set('requestdata', pm.iterationData.toObject());\r",
					"}\r",
					"const requestdata = pm.variables.get('requestdata');\r",
					"\r",
					"if(typeof requestdata !== 'object' || Object.keys(requestdata).length ===0) {\r",
					"    console.log(\"No external file found\")\r",
					"    return;\r",
					"}\r",
					"\r",
					"const currentrequest = requestdata.requests.filter(({name}) => name === pm.info.requestName) [0];\r",
					"if(!currentrequest){\r",
					"    console.log(`Request ${pm.info.requestName} has no data defined.`);\r",
					"}\r",
					"\r",
					"const variables = currentrequest.data.shift();\r",
					"\r",
					"Object.entries(variables).forEach(([key, value]) => {\r",
					"        pm.variables.set(key, value);\r",
					"    });\r",
					"\r",
					"pm.variables.set('requestdata',requestdata);\r",
					"if(currentrequest.data.length > 0){\r",
					"    pm.execution.setNextRequest(pm.info.requestName)\r",
					"}\r",
					" \r",
					"//------------------ Authorization Set Up-----------------\r",
					"pm.request.headers.clear(); // Clear all headers to prevent residual values\r",
					"var AuthType = pm.variables.get(\"authType\");\r",
					"switch (AuthType) {\r",
					"    case \"No Auth\":\r",
					"        pm.request.auth = { type: 'noauth' };\r",
					"        break;\r",
					"    case \"Bearer Token\":\r",
					"        const authToken = pm.environment.get(\"AuthToken\");\r",
					"        if (authToken) {\r",
					"            pm.request.headers.add({ key: \"Authorization\", value: `Bearer ${authToken}` });}\r",
					"         else {console.log(\"AuthToken is not set in the environment.\");}\r",
					"        break;\r",
					"    case \"Invalid Bearer token\":\r",
					"        pm.request.headers.add({ key: \"Authorization\", value: \"invalid\" });\r",
					"         console.log(\"Using invalid bearer token.\");\r",
					"        break;\r",
					"    default:\r",
					"        console.log(\"Unknown authType: \" + AuthType); break;\r",
					"}\r",
					"\r",
					"//-------------- Set the Request Method Dynamically---------------\r",
					" if (variables.method) {\r",
					"    pm.request.method = variables.method;\r",
					" }\r",
					"",
					"//--------------Fetch Data from External JSON Data file-----------------",
					"if (typeof pm.variables.get('requestdata') !== 'object') {",
					"    pm.variables.set('requestdata', pm.iterationData.toObject());",
					"}",
					"const requestdata = pm.variables.get('requestdata');",
					"",
					"if(typeof requestdata !== 'object' || Object.keys(requestdata).length ===0) {",
					"    console.log(\"No external file found\")",
					"    return;",
					"}",
					"",
					"const currentrequest = requestdata.requests.filter(({name}) => name === pm.info.requestName) [0];",
					"if(!currentrequest){",
					"    console.log(`Request ${pm.info.requestName} has no data defined.`);",
					"}",
					"",
					"const variables = currentrequest.data.shift();",
					"",
					"Object.entries(variables).forEach(([key, value]) => {",
					"        pm.variables.set(key, value);",
					"    });",
					"",
					"pm.variables.set('requestdata',requestdata);",
					"if(currentrequest.data.length > 0){",
					"    pm.execution.setNextRequest(pm.info.requestName)",
					"}",
					" ",
					"//------------------ Authorization Set Up-----------------",
					"pm.request.headers.clear(); // Clear all headers to prevent residual values",
					"var AuthType = pm.variables.get(\"authType\");",
					"switch (AuthType) {",
					"    case \"No Auth\":",
					"        pm.request.auth = { type: 'noauth' };",
					"        break;",
					"    case \"Bearer Token\":",
					"        const authToken = pm.environment.get(\"AuthToken\");",
					"        if (authToken) {",
					"            pm.request.headers.add({ key: \"Authorization\", value: `Bearer ${authToken}` });}",
					"         else {console.log(\"AuthToken is not set in the environment.\");}",
					"        break;",
					"    case \"Invalid Bearer token\":",
					"        pm.request.headers.add({ key: \"Authorization\", value: \"invalid\" });",
					"         console.log(\"Using invalid bearer token.\");",
					"        break;",
					"    default:",
					"        console.log(\"Unknown authType: \" + AuthType); break;",
					"}",
					"",
					"//-------------- Set the Request Method Dynamically---------------",
					" if (variables.method) {",
					"    pm.request.method = variables.method;",
					" }",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "42ffdd07-394b-4659-9bf8-781af83889c6",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"\r",
					"var commonTests = () =>{\r",
					"pm.test(\"Validating Status Code\", ()=> {\r",
					"    pm.expect(pm.response.code).to.eql(pm.variables.get(\"statusCode\"));\r",
					"});\r",
					"\r",
					"pm.test(\"Response status text check\", function () {\r",
					"    pm.expect(pm.response.status).to.eql(pm.variables.get('statusText'));\r",
					"});\r",
					"\r",
					"pm.test(\"Content-Type header is application/json\", ()=>{\r",
					"    pm.response.to.have.header(\"Content-Type\");\r",
					"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
					"});\r",
					"\r",
					"pm.test(\"Response time is less than 1000ms\", function () {\r",
					"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
					"});\r",
					"\r",
					"// pm.test('Validating Response is not NULL', function () {\r",
					"//     pm.expect(jsonData).to.not.equal(null);})\r",
					"\r",
					"}\r",
					"\r",
					"pm.environment.set(\"commonTests\",commonTests.toString());\r",
					"\r",
					"var jsonSchemaValidation = () =>{\r",
					"    pm.test(\"Verify JSON Schema using AJV\", function () {\r",
					"        pm.response.to.have.jsonSchema(expectedSchema);\r",
					"    });\r",
					"}\r",
					"\r",
					"pm.environment.set(\"jsonSchemaValidation\",jsonSchemaValidation.toString());\r",
					"\r",
					"//-----------Common Test/ Status Code Test Methods--------\r",
					"if (pm.response.text() !== '') {\r",
					"    try {\r",
					"        const jsonData = pm.response.json();\r",
					"        // Run common tests\r",
					"        eval(pm.environment.get(\"commonTests\"))();\r",
					"    } catch (e) {\r",
					"       console.log(\"Failed to parse JSON response:\", e);\r",
					"        // If the response is not valid JSON, only validate status and status text\r",
					"        pm.test(\"Validating Status Code - \" , () => {\r",
					"            pm.expect(pm.response.code).to.eql(pm.variables.get(\"statusCode\"));\r",
					"        });\r",
					"        pm.test(\"Response status text check - \" , function () {\r",
					"            pm.expect(pm.response.status).to.eql(pm.variables.get('statusText'));\r",
					"        });\r",
					"    }\r",
					"  } else {\r",
					" console.log(\"Empty response received.\");\r",
					"    pm.test(\"Validating Status Code - \"  , () => {\r",
					"        pm.expect(pm.response.code).to.eql(pm.variables.get(\"statusCode\"));\r",
					"    });\r",
					"  }\r",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "programId1",
			"value": ""
		},
		{
			"key": "programName1",
			"value": ""
		},
		{
			"key": "programId2",
			"value": ""
		},
		{
			"key": "programName2",
			"value": ""
		},
		{
			"key": "invalidProgramId",
			"value": "1234567"
		},
		{
			"key": "invalidProgramName",
			"value": "zwq"
		},
		{
			"key": "batchIdWithRecording",
			"value": "8433",
			"type": "string"
		},
		{
			"key": "batchIdWithoutRecording",
			"value": "8695",
			"type": "string"
		},
		{
			"key": "batchIDWithActiveStatus",
			"value": "8454",
			"type": "string"
		},
		{
			"key": "validStaffID",
			"value": "U02",
			"type": "string"
		},
		{
			"key": "classID",
			"value": "901",
			"type": "string"
		},
		{
			"key": "activeBatchId",
			"value": "9095",
			"type": "string"
		},
		{
			"key": "InactiveBatchId",
			"value": "8694",
			"type": "string"
		},
		{
			"key": "classTopic",
			"value": "Postman32oialpi3376",
			"type": "string"
		},
		{
			"key": "EndPoint",
			"value": "CreateClassSchedule",
			"type": "string"
		},
		{
			"key": "getAllClassListEndpoint",
			"value": "allClassses",
			"type": "string"
		},
		{
			"key": "getBatchRecordingPathParam",
			"value": "batchRecordings/",
			"type": "string"
		},
		{
			"key": "getClassesByBatchIdPathParam",
			"value": "classesbyBatch/",
			"type": "string"
		},
		{
			"key": "getClassesByStaffID",
			"value": "classesByStaff/",
			"type": "string"
		},
		{
			"key": "deleteByClassPathParam",
			"value": "deleteByClass/",
			"type": "string"
		}
	]
}